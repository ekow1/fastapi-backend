name: Auto Deploy to EC2 with Docker Stack

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: SSH to EC2 and deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          cd /home/ubuntu

          # If the app-fastapi directory does not exist, create it and clone
          if [ ! -d "app-fastapi" ]; then
            echo "Creating app-fastapi directory and cloning repo..."
            mkdir -p app-fastapi
            cd app-fastapi
            git clone -b ${{ github.ref_name }} https://github.com/${{ github.repository }}.git .
          else
            echo "Repo exists. Pulling updates..."
            cd app-fastapi
            git reset --hard
            git pull origin ${{ github.ref_name }}
          fi
          
          # Debug: Check if files exist
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          
          # Check if docker-stack.yml exists
          if [ ! -f "docker-stack.yml" ]; then
            echo "ERROR: docker-stack.yml not found!"
            exit 1
          fi
          
          echo "docker-stack.yml found, proceeding with deployment..."
          
          # Check if Docker Swarm is initialized
          if ! docker info | grep -q "Swarm: active"; then
            echo "Initializing Docker Swarm..."
            docker swarm init
          else
            echo "Docker Swarm is already active"
          fi
          
          # Check if user is in docker group, if not use sudo
          if docker ps > /dev/null 2>&1; then
            echo "Using docker without sudo"
            DOCKER_CMD="docker"
          else
            echo "Using docker with sudo"
            DOCKER_CMD="sudo docker"
          fi
          
          # Build the Docker image
          echo "Building Docker image..."
          $DOCKER_CMD build -t app-labs:latest .
          
          # Check if image was built successfully
          echo "Checking if image was built:"
          $DOCKER_CMD images | grep app-labs
          
          # Deploy the stack
          echo "Deploying Docker stack..."
          $DOCKER_CMD stack deploy -c docker-stack.yml app_stack
          
          # Wait for service to be ready
          echo "Waiting for service to start..."
          sleep 15
          
          # Check if service is running
          echo "Checking service status..."
          $DOCKER_CMD service ls
          $DOCKER_CMD service ps app_stack_app
          
          # Check service logs for errors
          echo "Checking service logs..."
          $DOCKER_CMD service logs app_stack_app
          
          # Install netstat for debugging if not available
          if ! command -v netstat &> /dev/null; then
            echo "Installing net-tools for netstat..."
            sudo apt-get update && sudo apt-get install -y net-tools
          fi
          
          # Test if port 4000 is accessible
          echo "Testing port 4000..."
          if curl -f http://localhost:4000/health > /dev/null 2>&1; then
            echo "✅ Port 4000 is accessible!"
          else
            echo "❌ Port 4000 is not accessible"
            echo "Checking what's running on port 4000:"
            netstat -tlnp | grep :4000 || echo "Nothing running on port 4000"
            
            # Check if there are any containers running
            echo "Checking all containers:"
            $DOCKER_CMD ps -a
            
            # Check if the image was built correctly
            echo "Checking Docker images:"
            $DOCKER_CMD images | grep app-labs
            
            # Get detailed service logs
            echo "Getting detailed service logs:"
            $DOCKER_CMD service logs app_stack_app --tail 50
          fi 